object HelloWorld {
def main(args: Array[String]): Unit = {

val example = Seq(
"..#OO..OO...#..O.OO....OO##O#...O..##.......O.OO..#.O.O#O....#.#O#O####...#.#..#.......O.O..O....#..",
".O....#.........OO........O...........#O##O.OOO..O..O.#.#O#O......O..O.O......#O.....###...O..#O....",
"......O.....OO.O...O.O.O.#...#O...O.O#...O#.O.O.O##.O.....##...OO..#O.O....#.#....O.#O.....##....O..",
".##O##...#..###.....O..O#O...........O.##O#OO.O#..OO..OO.#.....OO.O..#.....O..........O..O..O#.O.O..",
"...O.......O.#O.....OO.#.###....#O.O.##.O..O....O...#.O#O.#.#.O#......O.....#.........O..O##..O.O...",
"......O#....O..O..O...#..#........#.#..#........O.O#O.OO.O#.OO...#O.O#.O....#O.O.O#....O...O.#.O....",
"#O#.O....O.O...O..O#..O#..O##O#...........#....O...#.O....OO...O..O..O..OO..#.O...#......##...OO....",
"..OO#O....#O.O##...O#.OOO..O.O.O...#O#...O.#.OO....#....O..O#O....#..#...#..##.#....O.#...O.....O.O#",
"...##.#O#..O#..#....O#..OO...#..#......OO##O..O.#..##.#...#.O#..O...O....#....OO#...#..O.O....O.#..#",
".#....#O..O...O.#OOO#..OO...O.O..##..#....##O..#....O....O.....#.#..O..#..#.O#...O#O....O....O.O....",
"...O.O##.OO.O.#O..O....##...O....O.##O##.O#.....#..#.....O.OO#O.O...#...#.O..#.#O...#O.#...O..OOO.OO",
".......##......#.O.#.....#.....OO..O.....O#O.O....OO.O...OOO...#O..#O.O...##..O.O.#...O....O...O....",
"....OOO..#.#OO..O...#..#..OO.O.#.O..#...O....OOO.O.#.OO#.#......#..#.O.O.........O#...O.#.....##.O..",
".....#.O..O#..O...O.#..#.......#..OO#.#.....O#O..O...O.O....OO.#OO..O........O.#.O....O....O....OOO.",
"#...O.O#OO#.....OO..#......O.O..O...##.O#.O.#.OOO#.#...#.......O..O..O...#.O...O.O....#....O....#...",
"O.O..#...O..O......##.O....O#.O.O..O#.###OOO....#.O....#.#..##O..#..##..O..#O.....O#.O##...#....#O..",
"#.......O#.#.#O....#...O.O##.....#O##.#OO.O.#.....OO.....O.OO.O..O...O....#.O.O#.OO#.O#..##......#.#",
"..##.O.O....O..#.O..O.#......#..#O....O...##...#.O.....O.....OO#.......#..OO##.....#......OO...O.O.O",
".....O#....#..#......O#.....#O.O#........#...O.#...O.#.O#.O........O.O#OO.O..O..OO#O....#..#..OOO.O.",
".#.....OO...OO......OO.OO.O.......#.O#O.......O##...O.#.#......O#.......O.#.....O.....O#...O...#..OO",
"..#O.O.O..#...........O.O.....O..#..O#..O...#O...#..OO.O##.O...O.....O.#..OOO....O.O....O...OO#.O...",
".O.O..O#.....##..O.....O#...#..O.#O....#...............O...O.....OOO.OOO...O.O...O.#OO#.#...#O.....#",
"O#OO......#.O#..O#OOO.OO..O.O..OO.O.#O...#..O.#OO.O..O....OO#..#.#O....O..O#OO....O...O.OOO.O#O.....",
"..##O..O.O#..OO.##O#O.O..O.......OO.#....O..O.OO#O..O.O.OOO.##..#...O#......O....#..O.O#..O.......#.",
".##.O.....##.OOO..O.#..O.....OO.#.....O#..#.O.#.....#.#OOOO.O...#...OO..#.......OO#O......#O..O.#...",
"#.#O.O.O....O..OO...#......O.#O#.#....#...OO.....#O.O#OO.#......#..#...#....OOO#OOO.....O.##O......#",
"...##O.#.O...O.O...#O......O.......O............#.O.#....#......#.OO..OO.O..O..##.....#OO..OO.#OO...",
".........#.O..#..OO.O##..O.....#.....O..#.O#O....O.##..#....O#O.O..OO#.O..........OO....#.....O..#O.",
".#....#OOO.#....#.........#.#.O.O##.....#O.OO#O#OO...#...O.......#......#..O..O.OO.O...#.##.O..##.#.",
"##...O#.#...O..O....O...#...OO.......#...#...O##....#.#..###....O.O##..#.......O....#......O#.O...O#",
"O.##...#O...O...O.#O.#.#.........O...O..O#.OO....O.#....O...O...#......O...#..O##.O..##O..O...#..#.#",
".##..O....O..O#.OOO.O.#O#...###.O.......O##..O###.#........O..OO..O#O...O.OOO.#O.O..#O.#..#......O.O",
"..#O.OO#..#.#...O##...#...O#..O#O..O.O.......#.O#...#...##..O.#..O..O...#..O.O#.O.#...O...#...#.OO#.",
".#O...#O.#.#...#.O.##...#O.O.....OO....O...#.....#.#.O..#..#.O...O.O....OO.OO.O...#......#.#..#..O.#",
"..O..O#..O....OOO..O.....#..#.#.....O....O..O#O..#..#.......O.....#O.#..OO#..#.....#O##....O#.#.O...",
"..#.O#O.##O#OO...OO....O...OO......O....O###...#...O..O#OOOO...#OO.O.#.O...#.#.O..O.O#.#..O.#O#.O...",
"O#O...#........O.#........OOO.....O#.....O.O#...#..O........#.O.....#..#...#...OOO.###.O..##....O..#",
"..#O#O..........#O....O..O.....O...#.O.O..##..OO.O...#O.#.#O#OO.......#...O...O.O...O...#O..#..O##..",
"#.O.O#OO#O..#O#.O......O...##..#.#.O.....#....#....O#..O...O..O..#O#....O.#O..O#.....#.O#OO.O....O..",
"....#O...#...#.#..O.#.O.#.O.....OO#O.OO.#O..##...O..#......#.OO...O..O##O.......OO.#O....O#....O...#",
"O.O..#O.O.O.O.#.O##...O#.OOOO.......O..O.##.O#.O.#OO...OO.........#.#.OO.O.#O.#O..#.#..O..O..O.#O#..",
".O..#..OO..O##.....O...##.#.O.O..###O......O.###......#...#....OOO.....O..O......O..O.O..#O##.O...#.",
"O..#..O...#..O..O.#..#.O....O.#.##.#..#..OO#..O......OO###..O#O##O..O#............##.OO...O...OO#.#.",
"..O#.....O...#....O#.O....#.O#.....O.O....OO.##.O..#O.OO.O.O..#..#..O#O#.OO...#...........O..O...#.O",
"#..#.OO........O.....O.....O..O..O.#O#....O..OO..#....O..O.#..#.......O#..O....OOO...O#O.O.....O....",
".#......O.......#O#....OO...O#..OOOOO.#..O..#.OO#O.##....#....#.#...#...##..#O..O#......#......O....",
"..O....OOOO#.#O.##O.O....#.O..O.O...OO..O...#...#...#..OOO#O........O.#O#..#..O..OOO..##...#..#O..O.",
"O.O#...#O#......#.O#.OO.#.O.O....#..O......O.##O.O...###.............OO.#OO.......O....O.#O..O.O##.O",
"O.OO.O#...#OOO..#....O..OO.#O#.OO..##O.OO.O....#.#...O...#O..OO......O.O.O........O...O.OOO.#..OO...",
"..OOOOO.#....#O.OO.O...O###..#O#O.#.....#OO.O......#O...#.#.#...O#.O.O.#OOO#...#O....##.............",
"#..O.O.#..O..........O..#..OOO#..O.......O.OO....#.#...O....O....O..O.O...O....O.O.#O#..#.....#.##.O",
"OOO#O...#....O#.....O.....#...#..O....O..........O.....OOO..#..O.........O.#....###..#......#....#..",
"....O...O.##.O.....#....O......##.....#OO...O#....O........###O.O.#O......O.#..O..#.#...#......OOO..",
"#O#..OO.O...#...OO....O..O.O.O..O#..#....O....#....#...OO.O#....OOO....#.O.##....#.....O.O.#O.O..O..",
".......O..#.O.#...........O..O.....O#OO...O.O#.#...O....#.#.O#..O......O..........#.O.O.#..#.......O",
"..O.O....O....O#....#...O...#.OO........#....#O.O.O.....OO#.#.O##..OO.#.O..#..#...O#..O.#.O...O.#...",
"..#..#O#O..............O..O#..O...#..#.O.O.....##.....#OO#O...#.O.....###.OOO.##..O.......O....O.OO#",
".OOO.....O#...O.OO....#.......O...#..#OO...#O.#....O....#...#..O...O...##..OOO#..........O.O#..#..OO",
".O.#.O.O.............O..O#..##O.#..#O#O....##O#...OO.O.#.#......OO.O...#OO.##.O#O....O.#O...#......O",
"..#.O...OOOOO##.......O..#.......#.....O..#..O.....O......##...O#.O......#..........#.O..###..O.O.O.",
"...#...OO#..O.....O.O....OO.......O.O..OO..#O#..O..O...#....#.OO......O.O##.#.....O.......O...O..O..",
"....##.##.O......#O.#.O...OO...O.#...##.#.#.....O......#..O.O..#.....#..#.OO....O#..O....#.OOO#..O##",
"...O.O#...O..O..#.O..##.O....#OO.....O.O..O....O....#O...#.O.#.O.O..#O.O...#.#O...O..#O.#O.##...OO..",
".O...........O...#O..#.O.O#.......O...O.O.#.O.O......O.O#..OO.#O.O...##...O.#..O...O#..O..OOO#.#....",
".......O.#O#O..OO......O...O.#.O..##.#O#..O.O...O......O.......#......O##.O........##O.#....O#......",
"....O..O..#...O....O.OO...O#.#....O....O..#..#...O...O...#....O.........#.O..O..O.O..#.O............",
"#.O...#...O..#.......OO..#.O...##...#.....##.O.OOO...............O.#.O#..O..O#...O.O...#OO..O...#O.O",
"#..OO#.O...#.O....O.....O#...#....#.#O....#.#O.O..O...O.O..#O...#....O..OOO.#.O#.#...#O#.O#.O..O..#.",
"#...#.O......O#O.#O......#......OOO..O....#..O.#O...######.O#O.....O...#..O...OO..#......O....O.....",
"...##.O.....O#O...O.#O...##........OOO#O.#O.#....O..OO.#O.##O.O.###.......##.OO...#.....###........#",
"#..#.......OO..OOO..........OO...O#...OO......#.#.#..#..#.#...O#.O......O....O.#..O.#....#....O.OOOO",
"#O....O....#.O...O..#.#.O....OO..........#O.#O#..O.....#O.....#O.O..O..#.O##.OO##...O....#O..OO...O.",
"....#O##.OOO#...O.......OO.OO....O#.O...#.O..#..#..#....O..#.O....O#......O..O.O....O#...#O...#..#O.",
"..OO#OO..##....O.O.OOO......O....OOOO..#...#...O......#.####.O.....O....##O..#...O.#.O#O........#...",
"O#.##O#..#....O..O.OO#.##.......O......#...OO..O#.....#...O#O.O..O.....O...O.#..#.O..#O..#..#...#.O#",
"#.O#.O.....O.##...OO......O.O...O.O.....O...#...............#.O#.#.OOOOO#....##..O..##....OO.##.....",
"..#...O#.......#...O...O..##....#..O......#...O..O.....O.#.O.O......#O......#....#O..O..#.....O.....",
"...OO.OO.OOO..O..#O.......O##..#.O.#...O...O..O.O#.......#.#.O.#...O..#.O..O#.OOO..O........O.#..###",
"#O.......##.O..#.#...O.O#..#.#....#......#O#..#.#..#.#....OO...O.#...O..O#....#.#.#O...........##..#",
"..#O.O.........#.....#.O..O.O.....#OOO..OO.O.........OOO.#....#.......OO#.#.....O.O..#..#...#.O..O.O",
"..#..#...O.....#OO.#.....O..OO.#..O..#O...O..O....O..#O.O#O...........OO.O.#.....#..........#.OO.OO.",
".O#OO.OO.O.....#....OO#...#O#.#...O.O..O#..OO......O#...#.......OO.#.O.O..#.#.#O.O...O#.#..#.#.##.O#",
"#.OO.O.#..O..OO#O#.#...O...O#...OO#......#....##OO...O..O..O.O.##...#...##.O.#....#....#..##.OOO..O.",
"..#....O.....#...O....OO...O...#.#..O..#.O#OO.#..##.....O..#....O..#...#.#.O.O.O.#........#.....#.O.",
"....##.#......O..O#.##.#........O.........#.##.#.#.#.#.O...O..O.#O#.....#.#...#..O..#O..#...OOOO#O##",
"...#.#....O..O##O..OO...OOOO##..O.......O.##.OO##.#.....#...O....#.O.#O.O##O..O...#....#O...#...O.#O",
".....OO..#.O.O##.OO...#..OO.#.#.##...OO.#...O.O.O....O...O.#.#.#O.........#.OO.....O..###O...O..#..O",
".#..#....O...O#O......OO.........O#O#....#.O.#...O..OOO..O.#.O........O.......O..........O...#.#.OO.",
".O##...O#...#.O...#......#.#O...##..#O.#.##...#..O.#.OOO..O.OO#O.......##....#O.O.O..#.#....O##.....",
".O.O....#.O.##.....#......#...........O........OO.O.O..#O.O#.OO...#.O.#....#..O..O.O.#..O...#O#..#O#",
"..##O.O#.O.#....#....O...#.##..#..OO..OO.O..O.....#....#.#.O........#O...##.OO.#..#..O.#.......#....",
"#.........OO....O#.#..O.#..#.O#.#..#.O.....O......###.........O#O.O.O..#......#..#..OO...O..O#...O.#",
"...O....#...OO#...O..#......#.O........O....#..##OO#.O...O.O...O.#............#...#O.O....O#O......O",
"...O.#.OO.#....O.......#..O....O#.O...#.OO.#..O....OO..#..OO..O..O.###OO...O.O.#.......OO..OO#...O..",
"...O.#..#O..OO#...O....#O....#OO.#OO..........#O.OO.O#...##...OO#O..#O..#.#.........#.O.#.........##",
"O..O.O...O.......O...#O#...OO.#OO...#........#.OO...O..........#...O......O....O..#...O.....#OO....#",
"O.O.#.#O.O.O.O..#.....OOO....#.#.O#O#...O.#OO.#....#..#..#.OO.OOO#O#........O.....O.#........#.#O...",
"O..#.O........OO..O..O#.#..O..#..O#....#O#....#O.O.O..OO...O#.O.#O#..#OOO..O..#...#...O.#.OO.O#OO.OO",
".#.O..O..O...#.....#...O.O...#.#....OO.O.#.O.O..#O..O#..O#O..O.O#.....O#.O...O..OOO......OO.O.#.#.O.",
".O.O.O....OO....OOO....O..#O#O..#....O#....O..O.O...O....O....#..O..#..#.O#.OOO..#.......#.....#..O.",
)

val inputArg = example

val rn = inputArg.length
val cn = inputArg(0).length

var north = (0 until rn).foldLeft((0 until cn).map(_ => Seq((-1, 0)))) { case (counts, ri) =>
  (0 until cn).map(ci => (inputArg(ri)(ci) match {
    case 'O' => Seq((counts(ci).head._1, counts(ci).head._2 + 1))
    case '#' => Seq((ri, 0), counts(ci).head)
    case _ => Seq(counts(ci).head)
 }) ++ counts(ci).tail)
}

north.foreach(println(_))

var cycles = 0
while (cycles < 25) {

val west = (0 until cn).foldLeft((0 until rn).map(_ => Seq((-1, 0)))) { case (counts, ci) =>
  (0 until rn).map(ri =>
    (north(ci)(north(ci).indexWhere { case (r, _) => r <= ri }) match {
      case (rj, _) if (rj == ri) => Seq((ci, 0), counts(ri).head)
      case (rf, n) if (rf + n >= ri) => Seq((counts(ri).head._1, counts(ri).head._2 + 1))
      case _ => Seq(counts(ri).head)
    }) ++ counts(ri).tail
  )
}

val south = (0 until rn).foldRight((0 until cn).map(_ => Seq((rn, 0)))) { case (ri, counts) =>
  (0 until cn).map(ci =>
    (west(ri)(west(ri).indexWhere { case (c, _) => c <= ci }) match {
      case (cj, _) if (cj == ci) => Seq((ri, 0), counts(ci).head)
      case (cf, n) if (cf + n >= ci) => Seq((counts(ci).head._1, counts(ci).head._2 + 1))
      case _ => Seq(counts(ci).head)
    }) ++ counts(ci).tail
  )
}

val east = (0 until cn).foldRight((0 until rn).map(_ => Seq((cn, 0)))) { case (ci, counts) =>
  (0 until rn).map(ri =>
    (south(ci)(south(ci).indexWhere { case (r, _) => r >= ri }) match {
      case (rj, _) if (rj == ri) => Seq((ci, 0), counts(ri).head)
      case (rf, n) if (rf - n <= ri) => Seq((counts(ri).head._1, counts(ri).head._2 + 1))
      case _ => Seq(counts(ri).head)
    }) ++ counts(ri).tail
  )
}

cycles += 1
println((
  (0 until rn).map(r => east(r).map(_._2).sum * (rn - r)).sum,
  (east.map(_.map { case (c, n) => (0 until n).map(j => c - 1 - j).sum }.sum).sum)
))

north = (0 until rn).foldLeft((0 until cn).map(_ => Seq((-1, 0)))) { case (counts, ri) =>
  (0 until cn).map(ci =>
    (east(ri)(east(ri).indexWhere { case (c, _) => c >= ci }) match {
      case (cj, _) if (cj == ci) => Seq((ri, 0), counts(ci).head)
      case (cf, n) if (cf - n <= ci) => Seq((counts(ci).head._1, counts(ci).head._2 + 1))
      case _ => Seq(counts(ci).head)
    }) ++ counts(ci).tail
  )
}

}

north.foreach(println(_))

}
}
